
  //sync point to load waves
  s_barrier
  //Read A Elements from LDS into VREGS...  
  // one time burst read of A elements due to latency delay bbetween A and  B for first fetch
  // if elements are in L2 hit , you still have some latency between A and B for first fetch
  //  hide the latency by issuing bursts of A (fiqure out how many from profiler / thread trace)

  ds_read_b32       v[vgprValuA_X0_I0+0],  v[vgprLocalReadAddrA+0]  offset:0
  ds_read_b32       v[vgprValuA_X0_I0+1],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 
  ds_read_b32       v[vgprValuA_X0_I0+2],  v[vgprLocalReadAddrA+0]  offset:8
  ds_read_b32       v[vgprValuA_X0_I0+3],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 8
  ds_read_b32       v[vgprValuA_X0_I0+4],  v[vgprLocalReadAddrA+0]  offset:16
  ds_read_b32       v[vgprValuA_X0_I0+5],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 16
  ds_read_b32       v[vgprValuA_X0_I0+6],  v[vgprLocalReadAddrA+0]  offset:24 
  ds_read_b32       v[vgprValuA_X0_I0+7],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 24

  // Read B elements from LDS into VREGS
  // different strategy;; read as minimum as possible.  we need to get into unroll loop as soon as possible
  // Issue read for 8x32  B elements 
  ds_read_b32       v[vgprValuA_X0_I0+8],  v[vgprLocalReadAddrA+0]  offset:32
  ds_read_b32       v[vgprValuA_X0_I0+9],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8  + 32
  ds_read_b32       v[vgprValuA_X0_I0+10],  v[vgprLocalReadAddrA+0]  offset:40
  ds_read_b32       v[vgprValuA_X0_I0+11],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 40
  ds_read_b32       v[vgprValuA_X0_I0+12],  v[vgprLocalReadAddrA+0]  offset:48
  ds_read_b32       v[vgprValuA_X0_I0+13],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 48
  ds_read_b32       v[vgprValuA_X0_I0+14],  v[vgprLocalReadAddrA+0]  offset:56
  ds_read_b32       v[vgprValuA_X0_I0+15],  v[vgprLocalReadAddrA+0]  offset:varlds_Asize_per_wr * 8 + 56
  s_barrier
  ds_read_b32       v[vgprValuB_X0_I0+0],  v[vgprLocalReadAddrB+0]  offset:0
  ds_read_b32       v[vgprValuB_X0_I0+1],  v[vgprLocalReadAddrB+0]  offset:8
  ds_read_b32       v[vgprValuB_X0_I0+2],  v[vgprLocalReadAddrB+0]  offset:16
  ds_read_b32       v[vgprValuB_X0_I0+3],  v[vgprLocalReadAddrB+0]  offset:24

  s_lshr_b32       s[sgprLoopCounters+0], s[sgprSizesSum+0], 5 // s[sgprLoopCounters+0] = s[sgprSizesSum+0] / 32
  s_sub_u32	   s[sgprLoopCounters+0], 0x0, s[sgprLoopCounters+0]
  s_cmp_eq_u32     s[sgprLoopCounters+0], 0x0            // numIter0I == 0
  s_cbranch_scc1   label_0004                           // Dont enter Loop

  var p =0
  var k =1
  s_waitcnt lgkmcnt(3)
 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+0], v_regs(vgprValuB_X0_I0, 0+p*8),  v[vgprAcc+0] 
  ds_read_b32       v_regs(vgprValuB_X0_I0,4+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:32
  ds_read_b32       v_regs(vgprValuB_X0_I0,5+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:40
  ds_read_b32       v_regs(vgprValuB_X0_I0,6+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:48
  ds_read_b32       v_regs(vgprValuB_X0_I0,7+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:56
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+1],   v_regs(vgprValuB_X0_I0, 0+p*8), v[vgprAcc+16] 
  s_barrier
  s_waitcnt lgkmcnt(6)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+2], v_regs(vgprValuB_X0_I0, 1+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+3],   v_regs(vgprValuB_X0_I0, 1+p*8), v[vgprAcc+16] 
  s_waitcnt lgkmcnt(5)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+4], v_regs(vgprValuB_X0_I0, 2+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+5], v_regs(vgprValuB_X0_I0, 2+p*8), v[vgprAcc+16] 
  s_waitcnt lgkmcnt(4)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+6], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+7], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+16] 
  s_waitcnt lgkmcnt(0)

  //****************************************
  // End of  32x32 (block 0 of 64x32)
  //****************************************

  //****************************************
  // Begin of  32x32 (block 1 of 64x32)
  //****************************************

  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+8],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+9],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+16] 
  s_setprio 0 //lower wave priority other wave to execute valu instructions
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+10], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+0] 
  s_barrier
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+0),  v_regs(vgprLocalReadAddrA,k)  offset:0
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+1),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+11], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+2),  v_regs(vgprLocalReadAddrA,k)  offset:8
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+3),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 8
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+4),  v_regs(vgprLocalReadAddrA,k)  offset:16
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+5),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 16
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+12], v_regs(vgprValuB_X0_I0, 6+p*8),  v[vgprAcc+0] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+6),  v_regs(vgprLocalReadAddrA,k)  offset:24
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+7),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 24
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+8),  v_regs(vgprLocalReadAddrA,k)  offset:32
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+9),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 32
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+10),  v_regs(vgprLocalReadAddrA,k)  offset:40
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+13], v_regs(vgprValuB_X0_I0, 6+p*8), v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+11),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 40
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+12),  v_regs(vgprLocalReadAddrA,k)  offset:48
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+13),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 48
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+14),  v_regs(vgprLocalReadAddrA,k)  offset:56
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+15),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 56
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+14], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+0] 
  s_barrier
  ds_read_b32       v_regs(vgprValuB_X0_I0,0+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:0
  ds_read_b32       v_regs(vgprValuB_X0_I0,1+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:8
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+15], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuB_X0_I0,2+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:16
  ds_read_b32       v_regs(vgprValuB_X0_I0,3+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:24
  ds_read_b32       v_regs(vgprValuB_X0_I0,4+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:32
  ds_read_b32       v_regs(vgprValuB_X0_I0,5+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:40
  s_setprio 1
  s_add_u32     s[sgprLoopCounters+0], s[sgprLoopCounters+0], 0x1		//inc CounterL

  p =1
  k =0
  s_waitcnt lgkmcnt(5)
 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+0+16*p], v_regs(vgprValuB_X0_I0, 0+p*8),  v[vgprAcc+0] 
  ds_read_b32       v_regs(vgprValuB_X0_I0,6+p*8),  v_regs(vgprLocalReadAddrB,p)  offset:48
  ds_read_b32       v_regs(vgprValuB_X0_I0,7+p*8),  v_regs(vgprLocalReadAddrB,p)  offset:56
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+1+16*p],   v_regs(vgprValuB_X0_I0, 0+p*8), v[vgprAcc+16] 
  s_barrier
  s_waitcnt lgkmcnt(6)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+2+16*p], v_regs(vgprValuB_X0_I0, 1+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+3+16*p],   v_regs(vgprValuB_X0_I0, 1+p*8), v[vgprAcc+16] 
  s_waitcnt lgkmcnt(5)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+4+16*p], v_regs(vgprValuB_X0_I0, 2+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+5+16*p], v_regs(vgprValuB_X0_I0, 2+p*8), v[vgprAcc+16] 
  s_waitcnt lgkmcnt(4)
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+6+16*p], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+7+16*p], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+16] 
  s_waitcnt lgkmcnt(0)

  //****************************************
  // End of  32x32 (block 0 of 64x32)
  //****************************************

  //****************************************
  // Begin of  32x32 (block 1 of 64x32)
  //****************************************

  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+8+16*p],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+0] 
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+9+16*p],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+16] 
  s_setprio 0 //lower wave priority other wave to execute valu instructions
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+10+16*p], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+0] 
  s_barrier
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+0),  v_regs(vgprLocalReadAddrA,k)  offset:0
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+1),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+11+16*p], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+2),  v_regs(vgprLocalReadAddrA,k)  offset:8
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+3),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 8
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+4),  v_regs(vgprLocalReadAddrA,k)  offset:16
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+5),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 16
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+6),  v_regs(vgprLocalReadAddrA,k)  offset:24
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+12+16*p], v_regs(vgprValuB_X0_I0, 6+p*8),  v[vgprAcc+0] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+7),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 24
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+8),  v_regs(vgprLocalReadAddrA,k)  offset:32
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+9),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 32
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+10),  v_regs(vgprLocalReadAddrA,k)  offset:40
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+13+16*p], v_regs(vgprValuB_X0_I0, 6+p*8), v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+11),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 40
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+12),  v_regs(vgprLocalReadAddrA,k)  offset:48
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+13),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 48
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+14),  v_regs(vgprLocalReadAddrA,k)  offset:56
  ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+15),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 56
  v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+14+16*p], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+0] 
  s_barrier
  ds_read_b32       v_regs(vgprValuB_X0_I0,0+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:0
  ds_read_b32       v_regs(vgprValuB_X0_I0,1+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:8
  v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+15+16*p], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+16] 
  ds_read_b32       v_regs(vgprValuB_X0_I0,3+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:24
  ds_read_b32       v_regs(vgprValuB_X0_I0,4+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:32
  ds_read_b32       v_regs(vgprValuB_X0_I0,5+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:40
  ds_read_b32       v_regs(vgprValuB_X0_I0,2+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:16
  s_setprio 1
  s_add_u32     s[sgprLoopCounters+0], s[sgprLoopCounters+0], 0x1		//inc CounterL




/******************************************/
/* Unrolled Loop(s) - Begin               */
/******************************************/
label_0001:

  //A matrix tile 64 rows
  //B matrix tile 128 columns
  //B matrix tile 128 columns split across 4 SIMD
  //A matrix tile split into 2 tiles 
  // unroll loop  k/32 times * 2 
  // each mfma caculates k=4 unroll iterations
  // 8 mfma for k=32  for each 32x32 ThreadTile.. (2 for 64 A rows)

  //unrolling double 
  for  p =0; p < 2; p++
      k = 1-p

     s_waitcnt lgkmcnt(5)

     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+0], v_regs(vgprValuB_X0_I0, 0+p*8),  v[vgprAcc+0] 
     ds_read_b32       v_regs(vgprValuB_X0_I0,6+p*8),  v_regs(vgprLocalReadAddrB,p)  offset:48
     ds_read_b32       v_regs(vgprValuB_X0_I0,7+p*8),  v_regs(vgprLocalReadAddrB,p)  offset:56
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+1],   v_regs(vgprValuB_X0_I0, 0+p*8), v[vgprAcc+16] 
     s_barrier
     s_waitcnt lgkmcnt(6)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+2], v_regs(vgprValuB_X0_I0, 1+p*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+3],   v_regs(vgprValuB_X0_I0, 1+p*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(5)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+4], v_regs(vgprValuB_X0_I0, 2+p*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+5], v_regs(vgprValuB_X0_I0, 2+p*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(4)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+6], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+7], v_regs(vgprValuB_X0_I0, 3+p*8),  v[vgprAcc+16] 
     s_waitcnt lgkmcnt(0)

     //****************************************
     // End of  32x32 (block 0 of 64x32)
     //****************************************

     //****************************************
     // Begin of  32x32 (block 1 of 64x32)
     //****************************************

     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+8],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+9],  v_regs(vgprValuB_X0_I0, 4+p*8),  v[vgprAcc+16] 
     s_setprio 0 //lower wave priority other wave to execute valu instructions
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+10], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+0] 
     s_barrier
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+0),  v_regs(vgprLocalReadAddrA,k)  offset:0
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+1),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+11], v_regs(vgprValuB_X0_I0, 5+p*8),  v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+2),  v_regs(vgprLocalReadAddrA,k)  offset:8
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+3),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 8
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+4),  v_regs(vgprLocalReadAddrA,k)  offset:16
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+5),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 16
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+12], v_regs(vgprValuB_X0_I0, 6+p*8),  v[vgprAcc+0] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+6),  v_regs(vgprLocalReadAddrA,k)  offset:24
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+7),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 24
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+8),  v_regs(vgprLocalReadAddrA,k)  offset:32
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+9),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 32
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+10),  v_regs(vgprLocalReadAddrA,k)  offset:40
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+13], v_regs(vgprValuB_X0_I0, 6+p*8), v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+11),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 40
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+12),  v_regs(vgprLocalReadAddrA,k)  offset:48
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+13),  v_regs(vgprLocalReadAddrA,k)  offset:varlds_Asize_per_wr * 8 + 48
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+14),  v_regs(vgprLocalReadAddrA,k)  offset:56
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16*k+15),  v_regs(vgprLocalReadAddrA,k)  offset:56+varlds_Asize_per_wr * 8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16*p+14], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+0] 
     s_barrier
     ds_read_b32       v_regs(vgprValuB_X0_I0,0+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:0
     ds_read_b32       v_regs(vgprValuB_X0_I0,1+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16*p+15], v_regs(vgprValuB_X0_I0, 7+p*8),  v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuB_X0_I0,2+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:16
     ds_read_b32       v_regs(vgprValuB_X0_I0,3+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:24
     ds_read_b32       v_regs(vgprValuB_X0_I0,4+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:32
     ds_read_b32       v_regs(vgprValuB_X0_I0,5+k*8),  v_regs(vgprLocalReadAddrB,k)  offset:40
     s_setprio 1
     s_add_u32     s[sgprLoopCounters+0], s[sgprLoopCounters+0], 0x1		//inc CounterL
   end
   s_cmp_eq_i32  s[sgprLoopCounters+0], -0x2					// CounterL=0x2
   s_cbranch_scc0  label_0001

label_0002:


/*****************************************************************/
/*  NoLoadLoop - Begin
/*****************************************************************/

  //unrolling double 
     s_waitcnt lgkmcnt(5)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0] ,  v[vgprValuA_X0_I0+0], v_regs(vgprValuB_X0_I0, 0+0*8),  v[vgprAcc+0] 
     ds_read_b32       v_regs(vgprValuB_X0_I0,6+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:48
     ds_read_b32       v_regs(vgprValuB_X0_I0,7+0*8),  v_regs(vgprLocalReadAddrB,0)  offset:56
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+1], v_regs(vgprValuB_X0_I0, 0+0*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(6)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0],   v[vgprValuA_X0_I0+2], v_regs(vgprValuB_X0_I0, 1+0*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+3], v_regs(vgprValuB_X0_I0, 1+0*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(5)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0],   v[vgprValuA_X0_I0+4], v_regs(vgprValuB_X0_I0, 2+0*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+5], v_regs(vgprValuB_X0_I0, 2+0*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(4)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0],   v[vgprValuA_X0_I0+6], v_regs(vgprValuB_X0_I0, 3+0*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+7], v_regs(vgprValuB_X0_I0, 3+0*8),  v[vgprAcc+16] 
     s_waitcnt lgkmcnt(0)

     //****************************************
     // End of  32x32 (block 0 of 64x32)
     //****************************************

     //****************************************
     // Begin of  32x32 (block 1 of 64x32)
     //****************************************

     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+8], v_regs(vgprValuB_X0_I0, 4+0*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+9], v_regs(vgprValuB_X0_I0, 4+0*8),  v[vgprAcc+16] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+10], v_regs(vgprValuB_X0_I0, 5+0*8),  v[vgprAcc+0] 
     s_barrier
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+0),  v_regs(vgprLocalReadAddrA,1)  offset:0
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+1),  v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+11], v_regs(vgprValuB_X0_I0, 5+0*8),  v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+2),  v_regs(vgprLocalReadAddrA,1)  offset:8
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+3),  v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 8
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+4),  v_regs(vgprLocalReadAddrA,1)  offset:16
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+5),  v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 16
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0],   v[vgprValuA_X0_I0+12], v_regs(vgprValuB_X0_I0, 6+0*8),  v[vgprAcc+0] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+6),  v_regs(vgprLocalReadAddrA,1)  offset:24
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+7),  v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 24
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+8),  v_regs(vgprLocalReadAddrA,1)  offset:32
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+9),  v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 32
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+10), v_regs(vgprLocalReadAddrA,1)  offset:40
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+13],   v_regs(vgprValuB_X0_I0, 6+0*8), v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+11), v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 40
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+12), v_regs(vgprLocalReadAddrA,1)  offset:48
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+13), v_regs(vgprLocalReadAddrA,1)  offset:varlds_Asize_per_wr * 8 + 48
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+14), v_regs(vgprLocalReadAddrA,1)  offset:56
     ds_read_b32       v_regs(vgprValuA_X0_I0, 16+15), v_regs(vgprLocalReadAddrA,1)  offset:56 + varlds_Asize_per_wr * 8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0],   v[vgprValuA_X0_I0+14], v_regs(vgprValuB_X0_I0, 7+0*8),  v[vgprAcc+0] 
     s_barrier
     ds_read_b32       v_regs(vgprValuB_X0_I0,0+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:0
     ds_read_b32       v_regs(vgprValuB_X0_I0,1+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:8
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16],  v[vgprValuA_X0_I0+15], v_regs(vgprValuB_X0_I0, 7+0*8),  v[vgprAcc+16] 
     ds_read_b32       v_regs(vgprValuB_X0_I0,2+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:16
     ds_read_b32       v_regs(vgprValuB_X0_I0,3+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:24
     ds_read_b32       v_regs(vgprValuB_X0_I0,4+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:32
     ds_read_b32       v_regs(vgprValuB_X0_I0,5+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:40

     //second unroll Loop 
     s_waitcnt lgkmcnt(5)

     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+0], v_regs(vgprValuB_X0_I0, 0+1*8),  v[vgprAcc+0] 
     ds_read_b32       v_regs(vgprValuB_X0_I0,6+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:48
     ds_read_b32       v_regs(vgprValuB_X0_I0,7+1*8),  v_regs(vgprLocalReadAddrB,1)  offset:56
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16+1],   v_regs(vgprValuB_X0_I0, 0+1*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(6)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+2], v_regs(vgprValuB_X0_I0, 1+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16+3],   v_regs(vgprValuB_X0_I0, 1+1*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(5)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+4], v_regs(vgprValuB_X0_I0, 2+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]  ,   v[vgprValuA_X0_I0+16+5],   v_regs(vgprValuB_X0_I0, 2+1*8), v[vgprAcc+16] 
     s_waitcnt lgkmcnt(4)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+6], v_regs(vgprValuB_X0_I0, 3+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]   ,   v[vgprValuA_X0_I0+16+7], v_regs(vgprValuB_X0_I0, 3+1*8),  v[vgprAcc+16] 

     //****************************************
     // End of  32x32 (block 0 of 64x32)
     //****************************************
     //****************************************
     // Begin of  32x32 (block 1 of 64x32)
     //****************************************
     s_waitcnt lgkmcnt(0)
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+8], v_regs(vgprValuB_X0_I0, 4+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+10], v_regs(vgprValuB_X0_I0, 5+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+12], v_regs(vgprValuB_X0_I0, 6+1*8),  v[vgprAcc+0] 
     v_mfma_f32_32x32x4bf16   v[vgprAcc+0]   ,   v[vgprValuA_X0_I0+16+14], v_regs(vgprValuB_X0_I0, 7+1*8),  v[vgprAcc+0] 

      s_mov_b32		s84, roundMaskVal 
      v_xor_b32		v[vgprTmp+1], v[vgprTmp],v[vgprTmp]
      v_or_b32		v[vgprTmp+1], s84, v[vgprTmp+1]

     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]   ,   v[vgprValuA_X0_I0+16+9], v_regs(vgprValuB_X0_I0, 4+1*8),  v[vgprAcc+16] 
      for var j = 0; j < 8; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,0*16), 0
      end
      v_lshrrev_b32	v[vgprValuC+0], 16, v[vgprValuC+0]
      v_and_or_b32  	v[vgprValuC+0], v[vgprValuC+1], v[vgprTmp+1], v[vgprValuC+0]
      for var j = 2; j < 6; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]   ,   v[vgprValuA_X0_I0+16+11], v_regs(vgprValuB_X0_I0, 5+1*8),  v[vgprAcc+16] 
      buffer_store_dwordx2 v[vgprValuC+0:vgprValuC+1],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0  offset:64*0+0 offen:1 // store C
      for var j = 6; j < 8; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]   ,   v[vgprValuA_X0_I0+16+13], v_regs(vgprValuB_X0_I0, 6+1*8),  v[vgprAcc+16] 
      buffer_store_dwordx2 v[vgprValuC+2:vgprValuC+3],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*0+16 offen:1 // store C
      for var j = 8; j < 12; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,0*16), 0
      end
     v_mfma_f32_32x32x4bf16   v[vgprAcc+16]   ,   v[vgprValuA_X0_I0+16+15], v_regs(vgprValuB_X0_I0, 7+1*8),  v[vgprAcc+16] 
      for var j = 8; j < 12; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end
      buffer_store_dwordx2 v[vgprValuC+4:vgprValuC+5],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*0+32 offen:1 // store C
      for var j = 12; j < 16; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,0*16), 0
      end
      for var j = 12; j < 16; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end
      buffer_store_dwordx2 v[vgprValuC+6:vgprValuC+7],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*0+48 offen:1 // store C


store_c:
  
 for var i = 1; i < 2; i++
      for var j = 0; j < 8; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,i*16), 0
      end

      v_lshrrev_b32	v[vgprValuC+0], 16, v[vgprValuC+0]
      v_and_or_b32  	v[vgprValuC+0], v[vgprValuC+1], v[vgprTmp+1], v[vgprValuC+0]

      for var j = 2; j < 6; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end

      buffer_store_dwordx2 v[vgprValuC+0:vgprValuC+1],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0  offset:64*i+0 offen:1 // store C

      for var j = 6; j < 8; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end

      for var j = 8; j < 12; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,i*16), 0
      end

      buffer_store_dwordx2 v[vgprValuC+2:vgprValuC+3],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*i+16 offen:1 // store C

      for var j = 8; j < 12; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end

      for var j = 12; j < 16; j++
          v_accvgpr_read v_regs(vgprValuC, j),v_regs(j,i*16), 0
      end

      buffer_store_dwordx2 v[vgprValuC+4:vgprValuC+5],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*i+32 offen:1 // store C
      for var j = 12; j < 16; j+=2
          v_lshrrev_b32	   v[vgprValuC+j], 16, v[vgprValuC+j]
          v_and_or_b32     v[vgprValuC+(j/2)], v[vgprValuC+j+1],v[vgprTmp+1], v[vgprValuC+j]
      end
      buffer_store_dwordx2 v[vgprValuC+6:vgprValuC+7],v[vgprGlobalWriteOfvarC],  s[sgprSrdD:sgprSrdD+3], 0 offset:64*i+48 offen:1 // store C

 end

label_0004:
  s_waitcnt        0  
  s_endpgm                                          



end
