#!/usr/bin/env python3


import argparse
import json
import os
import pdb
#import numpy as np
#import pandas as pd
from pathlib import Path


def get_max_dim_size(problem_sizes):
    max_size = 0
    for p in problem_sizes:
        for o in p:
            if max_size < o:
                max_size = o
    return max_size


def do_perf(problem_sizes, thory_gflops):
    max_dim_size = get_max_dim_size(problem_sizes)
    kernel, m, n, c, k, gflops, efficiency = [], [], [], [], [], [], []
    for p in problem_sizes:
        print("pef problem size: " + ', '.join(str(o) for o in p))
        m_, n_, c_, k_ = p[:4]
        ps_cmd = "sed -i \'/.*problemSizes\[/,/}};/s/{.*}};/{" + ', '.join(str(o) for o in p) + "}};/g\' ../source/ClientParameters.h"
        ms_cmd = "sed -i \'s/\(.*maxSize. = \).*/\\1" + str(max_dim_size**2) + ";/g\' ../source/ClientParameters.h"
        cc_cmd = "cmake --build . --config Release -- -j 8"
        perf_cmd = "./client --platform-idx 0 --device-idx 0 --init-alpha 1 --init-beta 0 --init-d 0 --init-c 0 --init-a 3 --init-b 3 --c-equal-d 1 --print-valids 0 --print-max 4 --num-benchmarks 20 --num-elements-to-validate 0 --num-enqueues-per-sync 1 --num-syncs-per-benchmark 1 --use-gpu-timer 1 --sleep-percent 200 --benchmark-solutions 0"
        m.append(m_)
        n.append(n_)
        c.append(c_)
        k.append(k_)
        ret = os.system(ps_cmd)
        if ret != 0:
            print("ERROR: Fail to set problem size: " + ps_cmd)
            exit(ret)
        ret = os.system(ms_cmd)
        if ret != 0:
            print("ERROR: Fail to set maxSize of A/B/C/D: " + ms_cmd)
            exit(ret)
        ret = os.system(cc_cmd)
        if ret != 0:
            exit(ret)
        gflops_ = []
        kernel_name = None
        for _ in range(1):
            res = os.popen(perf_cmd).readlines()[-1].split(' ')
            gflops_.append(float(res[1]))
            if kernel_name == None:
                kernel_name = res[-1].strip()
        gflops_max = max(gflops_)
        print(gflops_)
        print(gflops_max)
        gflops.append(gflops_max)
        efficiency.append(gflops_max / float(thory_gflops) * 100)
        kernel.append(kernel_name)
    return (kernel, m, n, c, k, gflops, efficiency)


def save_file(data):
    kernel, m, n, c, k, gflops, efficiency = data
    df = pd.DataFrame()
    #df['KernelName'] = np.array(kernel)
    df['M'] = np.array(m)
    df['N'] = np.array(n)
    df['C'] = np.array(c)
    df['K'] = np.array(k)
    df['GFlops'] = np.array(gflops)
    df['Efficiency'] = np.array(efficiency)
    fname = kernel[0] + '.csv'
    print("perf resoult save as " + fname)
    df.to_csv(fname, index=False)


def write_line(fp, s='', cmt='', tab=0):
    pre_s = '  ' * tab
    if cmt != '':
        if not cmt.startswith('//'):
            cmt = '// ' + cmt
        cmt = '\t\t' + cmt
    fp.write(pre_s + s + cmt + '\n')


def write_comments(fp, s, bar_len=40, nl=False):
    bar = '/' + '*' * bar_len + '/\n'
    s = '/*' + s + '*/\n'
    fp.write(bar)
    fp.write(s)
    fp.write(bar)
    if nl:
        fp.write('\n')


def def_var(fp, name, val, cmt='', nl=False):
    val = str(val)
    write_line(fp, 'var ' + name + ' = ' + val, cmt)
    if nl:
        write_line(fp)


def def_regs(conf, fp):
    for k in ['sregs', 'vregs']:
        write_line(fp, "// %s define" % k)
        for _, o in conf[k].items():
            def_var(fp, o['name'], o['value'])
        write_line(fp)

    write_comments(fp, '2GB limit - set offsets to -1 to exceed this and clamp')
    def_var(fp, 'BufferLimit', 0x80000000, nl=True)
    write_comments(fp, 'Bits 127:96 of SRD.  Set DataFormat = 32 bit')
    def_var(fp, 'Srd127_96', 0x0020000, nl=True)
    def_var(fp, 'roundMaskVal', 0xffff0000, nl=True)


def def_lds_vars(conf, fp):
    pad = conf['mfma']['pad']
    mt_h = conf['mt']['h']
    mt_w = conf['mt']['w']
    simd = conf['mfma']['simd']

    a_per_wr = 256 + pad
    lvca = 32 / (conf['glvw'] * 2)
    rows_per_wave = mt_h / simd
    a_vw = rows_per_wave / (64 / lvca)

    b_per_wr = 256 + pad
    lvcb = 32 / (conf['glvw'] * 2)
    cols_per_wave = mt_w / simd
    b_vw = cols_per_wave / (64 / lvcb)

    conf['lvca'] = lvca
    conf['lvcb'] = lvcb
    conf['a_vw'] = a_vw
    conf['b_vw'] = b_vw

    write_line(fp, "// lds vars define")
    def_var(fp, 'varlds_pad', pad)
    def_var(fp, 'varlds_Asize_per_wr', a_per_wr, '256 + varlds_pad')
    def_var(fp, 'varlds_Asize_per_wave', 'varlds_Asize_per_wr * %d' % a_vw, 'vw == %d' % a_vw)
    def_var(fp, 'varlds_Asize_per_wg', 'varlds_Asize_per_wave * %d' % simd)
    write_line(fp)

    def_var(fp, 'varlds_Bsize_per_wr', b_per_wr, '256 + varlds_pad')
    def_var(fp, 'varlds_Bsize_per_wave', 'varlds_Bsize_per_wr * %d' % b_vw, 'vw == %d' % b_vw)
    def_var(fp, 'varlds_Bsize_per_wg', 'varlds_Bsize_per_wave * %d' % simd)
    write_line(fp)

    def_var(fp, 'varA_lds_base_addr', 0)
    def_var(fp, 'varB_lds_base_addr', 'varA_lds_base_addr + varlds_Asize_per_wg * 2')
    write_line(fp)


def def_start(conf, fp):
    write_line(fp, '\nshader main')
    write_line(fp, 'user_sgpr_count(14)', tab=1)
    write_line(fp, 'tgid_x_en(1)', tab=1)
    write_line(fp, 'tgid_y_en(1)', tab=1)
    write_line(fp, 'tgid_z_en(1)', tab=1)
    write_line(fp, 'tidig_comp_cnt(2)', tab=1)
    write_line(fp)


def def_end(conf, fp):
    write_line(fp, 'label_end:')
    write_line(fp, 's_waitcnt 0', tab=1)
    write_line(fp, 's_endpgm', tab=1)
    write_line(fp)
    write_line(fp, 'end')
    write_line(fp)


def load_kargs(conf, fp):


def def_fetch(conf, fp):
    # load A & B address, strideI/J/IK/JK
    load_kargs()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.description = "Replacement kernel generator"
    parser.add_argument("-f", "--config", type=str, help='specify config file path')
    parser.add_argument("-o", "--output", type=str, help='specify output file path')
    args = parser.parse_args()

    if not args.config:
        print('No config file specified, please use "--help" for more details.')
        exit(-1)

    if not args.output:
        out_fpath = Path(args.config).stem + '.sp3'

    conf = json.load(open(args.config, 'r'))
    with open(out_fpath, 'w') as fp:
        def_regs(conf, fp)
        def_lds_vars(conf, fp)
        def_start(conf, fp)
        def_fetch(conf, fp)
        #def_mac(conf, fp)
        def_end(conf, fp)

